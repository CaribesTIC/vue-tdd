import{_ as a,c as e,o,O as s}from"./chunks/framework.8d330141.js";const b=JSON.parse('{"title":"Probando Vuex","description":"","frontmatter":{},"headers":[],"relativePath":"vth/probando-vuex.md"}'),n={name:"vth/probando-vuex.md"},r=s('<h1 id="probando-vuex" tabindex="-1">Probando Vuex <a class="header-anchor" href="#probando-vuex" aria-label="Permalink to &quot;Probando Vuex&quot;">​</a></h1><p>Las siguientes guías analizan las pruebas de Vuex</p><h2 id="los-dos-lados-de-probando-vuex" tabindex="-1">Los Dos Lados de Probando Vuex <a class="header-anchor" href="#los-dos-lados-de-probando-vuex" aria-label="Permalink to &quot;Los Dos Lados de Probando Vuex&quot;">​</a></h2><p>En general, los componentes interactuarán con Vuex por</p><ol><li>Cometer una mutación</li><li>Despachar una acción</li><li>Acceder al estado a través de <code>$store.state</code> o <code>getters</code></li></ol><p>Estas pruebas son para afirmar que el componente se comporta correctamente según el estado actual de la tienda Vuex. No necesitan saber acerca de la implementación de los mutadores, acciones o captadores.</p><p>Cualquier lógica realizada por el almacén, como mutaciones y captadores, se puede probar de forma aislada. Dado que las tiendas Vuex se componen de funciones regulares de JavaScript, se prueban fácilmente.</p><p>Las primeras guías analizan técnicas para probar Vuex de forma aislada considerando mutaciones, acciones y captadores. Las siguientes guías presentan algunas técnicas para probar los componentes que usan una tienda Vuex y garantizar que se comporten correctamente según el estado de la tienda.</p>',8),t=[r];function d(c,i,l,u,p,m){return o(),e("div",null,t)}const x=a(n,[["render",d]]);export{b as __pageData,x as default};
