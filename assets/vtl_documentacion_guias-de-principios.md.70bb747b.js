import{_ as e,c as a,o as s,O as n}from"./chunks/framework.8d330141.js";const b=JSON.parse('{"title":"Guías de Principios","description":"","frontmatter":{},"headers":[],"relativePath":"vtl/documentacion/guias-de-principios.md"}'),o={name:"vtl/documentacion/guias-de-principios.md"},i=n('<h1 id="guias-de-principios" tabindex="-1">Guías de Principios <a class="header-anchor" href="#guias-de-principios" aria-label="Permalink to &quot;Guías de Principios&quot;">​</a></h1><blockquote><p><a href="https://twitter.com/kentcdodds/status/977018512689455106" target="_blank" rel="noreferrer">Cuanto más se parezcan sus pruebas a la forma en que se usa su software, más confianza le pueden brindar.</a></p></blockquote><p>Solo tratamos de exponer métodos y utilidades que lo animen a escribir pruebas que se parezcan mucho a cómo se usan sus páginas web.</p><p>Las utilidades se incluyen en este proyecto en base a las siguientes guías de principios:</p><ol><li>Si se relaciona con la renderización de componentes, entonces debería tratar con nodos DOM en lugar de instancias de componentes, y no debería fomentar el manejo de instancias de componentes.</li><li>En general, debería ser útil para probar los componentes de la aplicación en la forma en que el usuario los usaría. Estamos haciendo algunas compensaciones aquí porque estamos usando una computadora y, a menudo, un entorno de navegador simulado, pero en general, las utilidades deberían alentar las pruebas que usan los componentes de la forma en que están destinados a ser utilizados.</li><li>Las implementaciones de utilidades y las API deben ser simples y flexibles.</li></ol><p>Al final del día, lo que queremos es que esta biblioteca sea bastante liviana, simple y comprensible.</p>',6),t=[i];function r(l,c,d,u,p,m){return s(),a("div",null,t)}const f=e(o,[["render",r]]);export{b as __pageData,f as default};
