import{_ as a,c as e,o as s,O as r}from"./chunks/framework.8d330141.js";const g=JSON.parse('{"title":"Pruebas unitarias","description":"","frontmatter":{},"headers":[],"relativePath":"comenzar/pruebas-unitarias.md"}'),o={name:"comenzar/pruebas-unitarias.md"},i=r('<h1 id="pruebas-unitarias" tabindex="-1">Pruebas unitarias <a class="header-anchor" href="#pruebas-unitarias" aria-label="Permalink to &quot;Pruebas unitarias&quot;">​</a></h1><p>Las pruebas unitarias o unit testing son una forma de comprobar que un fragmento de código funciona correctamente.</p><h2 id="¿que-son-las-pruebas-unitarias" tabindex="-1">¿Qué son las pruebas unitarias? <a class="header-anchor" href="#¿que-son-las-pruebas-unitarias" aria-label="Permalink to &quot;¿Qué son las pruebas unitarias?&quot;">​</a></h2><p>Las pruebas unitarias consisten en aislar una parte del código y comprobar que funciona a la perfección. Son pequeños tests que validan el comportamiento de un objeto y la lógica.</p><p>El unit testing suele realizarse durante la fase de desarrollo de aplicaciones de software o móviles. Normalmente las llevan a cabo los desarrolladores, aunque en la práctica, también pueden realizarlas los responsables de QA.</p><p>Hay una especie de mito respecto a las pruebas unitarias. Algunos desarrolladores están convencidos de que son una pérdida de tiempo y las evitan buscando ahorrar tiempo. Nada más alejado de la realidad.</p><p>Con ellas se detectan antes errores que, sin las pruebas unitarias, no se podrían detectar hasta fases más avanzadas como las pruebas de sistema, de integración e incluso en la beta.</p><p>Realizar pruebas unitarias con regularidad supone, al final, un ahorro de tiempo y dinero.</p><h2 id="motivos-para-realizar-un-test-unitario" tabindex="-1">Motivos para realizar un test unitario <a class="header-anchor" href="#motivos-para-realizar-un-test-unitario" aria-label="Permalink to &quot;Motivos para realizar un test unitario&quot;">​</a></h2><p>Si todavía no estás del todo seguro de por qué debes incorporar las unit testing a tu día a día como desarrollador, te damos algunos motivos:</p><ul><li>Las pruebas unitarias demuestran que la <strong>lógica del código</strong> está en buen estado y que funcionará en todos los casos.</li><li>Aumentan la <strong>legibilidad del código</strong> y ayudan a los desarrolladores a entender el código base, lo que facilita hacer cambios más rápidamente.</li><li>Los test unitarios bien realizados sirven como <strong>documentación</strong> del proyecto.</li><li>Se realizan en <strong>pocos milisegundos</strong>, por lo que podrás realizar cientos de ellas en muy poco tiempo.</li><li>Las unit testing permiten al desarrollador <strong>refactorizar el código</strong> más adelante y tener la garantía de que el módulo sigue funcionando correctamente. Para ello se escriben casos de prueba para todas las funciones y métodos, para que cada vez que un cambio provoque un error, sea posible identificarlo y repararlo rápidamente.</li><li>La <strong>calidad final</strong> del código mejorará ya que, al estar realizando pruebas de manera continua, al finalizar el código será limpio y de calidad.</li><li>Como las pruebas unitarias dividen el código en pequeños fragmentos, es posible <strong>probar distintas partes del proyecto</strong> sin tener que esperar a que otras estén completadas.</li></ul><h2 id="buenas-practicas-para-los-tests-unitarios" tabindex="-1">Buenas prácticas para los tests unitarios <a class="header-anchor" href="#buenas-practicas-para-los-tests-unitarios" aria-label="Permalink to &quot;Buenas prácticas para los tests unitarios&quot;">​</a></h2><p>Una vez te acostumbres a realizar este tipo de pruebas irás descubriendo todas sus ventajas. Sin embargo, si todavía no tienes experiencia, vamos a ver algunos <strong>ejemplos de buenas prácticas en las pruebas unitarias de software</strong>.</p><ul><li><strong>Las pruebas unitarias deberían ser independientes.</strong> Si se produce cualquier tipo de mejora o cambio en los requerimientos, las pruebas unitarias no deberían verse afectados.</li><li><strong>Prueba sólo un código a la vez.</strong></li><li><strong>Sigue un esquema claro.</strong> Puede parecer algo secundario, pero no lo es. Sé también consistente a la hora de nombrar tus unit tests.</li><li><strong>Cualquier cambio necesita pasar el test.</strong> En el caso de producirse un cambio en el código de cualquier módulo, asegúrate de que hay una prueba unitaria que se corresponda con ese módulo y que este pasa las pruebas antes de cambiar la implementación.</li><li><strong>Corrige los bugs identificados durante las pruebas antes de continuar.</strong> Asegúrate de realizar esta corrección antes de proseguir con la siguiente fase del ciclo de vida del desarrollo de software.</li><li><strong>Acostúmbrate a realizar pruebas regularmente mientras programas.</strong> Cuanto más código escribas sin testar, más caminos tendrás que revisar para encontrar errores.</li></ul><p>No puedes esperar que las pruebas unitarias descubran todos los errores de un software, pero sí que ahorran mucho tiempo al facilitar localizar los errores de una manera más sencilla.</p>',15),n=[i];function t(l,u,d,c,p,m){return s(),e("div",null,n)}const q=a(o,[["render",t]]);export{g as __pageData,q as default};
